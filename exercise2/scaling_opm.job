#!/bin/bash

# Name of the job
#SBATCH --job-name=Mandelbrot_MPI_scaling

# Define the number of nodes you need.
#SBATCH --nodes=2

# Define how long the job will run in real time. Format is d-hh:mm:ss
# For a 30 seconds job
#SBATCH --time=0-01:30:00

## Define the account name, e.g. for the Laboratory of Data Engineering
#SBATCH -A dssc

# Define the partition on which the job shall run, e.g. EPYC, THIN, GPU, DGX
#SBATCH -p EPYC

#MPI command
# MPI command
module load openMPI/4.1.5/gnu

# Specify the full path to mpicc
OMPI_PATH=$(which mpicc)

# Compile the sources
$OMPI_PATH -o mandel pgm.c mandelbrot.c -lm -fopenmp

output_file="omp_scaling.txt"

first_image_saved=false

# Fixed number of MPI processes
mpi_processes=2

# Loop through different numbers of OpenMP threads
for threads in {1..8}
do
    echo "OpenMP threads: $threads, MPI processes: $mpi_processes" >> $output_file
    echo "=========================================================" >> $output_file
    # Set the number of OpenMP threads
    export OMP_NUM_THREADS=$threads
    # Redirect the stdout of time command to the file
    { time mpirun --mca mca_base_component_show_load_errors 0 --map-by core -n $mpi_processes ./mandel 3096 3096 -2.5 -1.5 1.5 1.5 65535 image.pgm; } 2>> $output_file
    echo "=========================================================" >> $output_file

    # Save images for first and last thread count
    if [ $threads -eq 1 ] && [ $first_image_saved = false ]; then
        mv image.pgm first_image.pgm
        first_image_saved=true
    elif [ $threads -eq 8 ]; then
        mv image.pgm last_image.pgm
        rm -f image.pgm  # Remove other image.pgm files
    fi
done

